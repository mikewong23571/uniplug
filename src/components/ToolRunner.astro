---

export interface Props {
  tool: {
    id: string;
    data: {
      id: string;
      title: string;
      description: string;
      inputs: Array<{
        id: string;
        type: string;
        label: string;
        placeholder?: string;
        required?: boolean;
        accept?: string[];
        options?: Array<{ value: string; label: string }>;
        min?: number;
        max?: number;
        step?: number;
        defaultValue?: any;
      }>;
      outputs: Array<{
        id: string;
        type: string;
        label: string;
      }>;
      logic: string;
    };
  };
}

const { tool } = Astro.props;
---

<div class="tool-runner max-w-4xl mx-auto p-6">
  <!-- 工具标题和描述 -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">{tool.data.title}</h1>
    <p class="text-lg text-gray-600">{tool.data.description}</p>
  </div>

  <!-- 输入表单 -->
  <div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h2 class="text-xl font-semibold mb-4">输入参数</h2>
    <form id="tool-form" class="space-y-4">
      {tool.data.inputs.map((input) => (
        <div class="form-group">
          <label for={input.id} class="block text-sm font-medium text-gray-700 mb-2">
            {input.label}
            {input.required && <span class="text-red-500 ml-1">*</span>}
          </label>
          
          {input.type === 'text' && (
            <input
              type="text"
              id={input.id}
              name={input.id}
              placeholder={input.placeholder}
              required={input.required}
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={input.defaultValue || ''}
            />
          )}
          
          {input.type === 'number' && (
            <div class="flex items-center space-x-4">
              <input
                type="number"
                id={input.id}
                name={input.id}
                min={input.min}
                max={input.max}
                step={input.step}
                required={input.required}
                class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={input.defaultValue || ''}
              />
              {input.min !== undefined && input.max !== undefined && (
                <input
                  type="range"
                  min={input.min}
                  max={input.max}
                  step={input.step}
                  value={input.defaultValue || input.min}
                  class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  oninput={`document.getElementById('${input.id}').value = this.value`}
                />
              )}
            </div>
          )}
          
          {input.type === 'file' && (
            <input
              type="file"
              id={input.id}
              name={input.id}
              accept={input.accept?.join(',')}
              required={input.required}
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          )}
          
          {input.type === 'select' && input.options && (
            <select
              id={input.id}
              name={input.id}
              required={input.required}
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {input.options.map((option) => (
                <option value={option.value} selected={option.value === input.defaultValue}>
                  {option.label}
                </option>
              ))}
            </select>
          )}
          
          {input.type === 'textarea' && (
            <textarea
              id={input.id}
              name={input.id}
              placeholder={input.placeholder}
              required={input.required}
              rows="4"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >{input.defaultValue || ''}</textarea>
          )}
          
          {input.type === 'checkbox' && (
            <div class="flex items-center">
              <input
                type="checkbox"
                id={input.id}
                name={input.id}
                checked={input.defaultValue}
                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label for={input.id} class="ml-2 block text-sm text-gray-900">
                {input.label}
              </label>
            </div>
          )}
        </div>
      ))}
      
      <button
        type="submit"
        class="w-full bg-blue-600 text-white py-3 px-6 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 font-medium"
      >
        开始处理
      </button>
    </form>
  </div>

  <!-- 结果展示区域 -->
  <div id="result-container" class="hidden bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-semibold mb-4">处理结果</h2>
    <div id="result-content"></div>
  </div>

  <!-- 加载状态 -->
  <div id="loading" class="hidden text-center py-8">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    <p class="mt-2 text-gray-600">正在处理中...</p>
  </div>
</div>

<script define:vars={{ toolLogic: tool.data.logic, outputs: tool.data.outputs }}>
  document.getElementById('tool-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const inputs = {};
    
    // 收集表单数据
    for (const [key, value] of formData.entries()) {
      const input = e.target.querySelector(`[name="${key}"]`);
      if (input.type === 'file') {
        inputs[key] = input.files[0];
      } else if (input.type === 'number') {
        inputs[key] = parseFloat(value) || 0;
      } else if (input.type === 'checkbox') {
        inputs[key] = input.checked;
      } else {
        inputs[key] = value;
      }
    }
    
    // 处理未选中的 checkbox（FormData 不包含未选中的 checkbox）
    const allInputs = e.target.querySelectorAll('input[type="checkbox"]');
    allInputs.forEach(checkbox => {
      if (!formData.has(checkbox.name)) {
        inputs[checkbox.name] = false;
      }
    });
    
    // 显示加载状态
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('result-container').classList.add('hidden');
    
    try {
      // DEBUG8: 使用logic入口文件确保正确打包
      console.log('DEBUG8 - toolLogic:', toolLogic);
      const { getLogicFunction } = await import('../logic/index');
      const logicFunction = await getLogicFunction(toolLogic);
      console.log('DEBUG8 - logicFunction loaded:', logicFunction);
      const result = await logicFunction(inputs);
      
      // 渲染结果
      renderResults(result, outputs);
      
      // 显示结果
      document.getElementById('result-container').classList.remove('hidden');
    } catch (error) {
      console.error('处理失败:', error);
      document.getElementById('result-content').innerHTML = `
        <div class="bg-red-50 border border-red-200 rounded-md p-4">
          <div class="flex">
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">处理失败</h3>
              <div class="mt-2 text-sm text-red-700">
                <p>${error.message}</p>
              </div>
            </div>
          </div>
        </div>
      `;
      document.getElementById('result-container').classList.remove('hidden');
    } finally {
      document.getElementById('loading').classList.add('hidden');
    }
  });
  
  function renderResults(results, outputSchema) {
    const container = document.getElementById('result-content');
    container.innerHTML = '';
    
    outputSchema.forEach(output => {
      const value = results[output.id];
      if (value === undefined) return;
      
      const outputDiv = document.createElement('div');
      outputDiv.className = 'mb-6';
      
      const label = document.createElement('h3');
      label.className = 'text-lg font-medium text-gray-900 mb-3';
      label.textContent = output.label;
      outputDiv.appendChild(label);
      
      const contentDiv = document.createElement('div');
      
      switch (output.type) {
        case 'image':
          const img = document.createElement('img');
          img.src = value;
          img.className = 'max-w-full h-auto rounded-lg shadow-md';
          contentDiv.appendChild(img);
          
          // 添加下载按钮
          const downloadBtn = document.createElement('a');
          downloadBtn.href = value;
          downloadBtn.download = `compressed-image.jpg`;
          downloadBtn.className = 'inline-block mt-3 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors duration-200';
          downloadBtn.textContent = '下载图片';
          contentDiv.appendChild(downloadBtn);
          break;
          
        case 'json':
          const pre = document.createElement('pre');
          pre.className = 'bg-gray-50 p-4 rounded-lg overflow-auto text-sm';
          pre.textContent = JSON.stringify(value, null, 2);
          contentDiv.appendChild(pre);
          break;
          
        case 'text':
          const textDiv = document.createElement('div');
          textDiv.className = 'bg-gray-50 p-4 rounded-lg';
          textDiv.textContent = value;
          contentDiv.appendChild(textDiv);
          break;
          
        default:
          const defaultDiv = document.createElement('div');
          defaultDiv.textContent = String(value);
          contentDiv.appendChild(defaultDiv);
      }
      
      outputDiv.appendChild(contentDiv);
      container.appendChild(outputDiv);
    });
  }
</script>